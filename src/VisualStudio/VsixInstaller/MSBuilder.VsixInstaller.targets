<?xml version="1.0" encoding="utf-8"?>
<!--
	The MIT License (MIT)

	Copyright (c) 2017 Mobile Essentials

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="RootSuffix">

	<PropertyGroup>
    <_PS Condition="'$(_PS)' == ''">$(SystemRoot)\System32\WindowsPowerShell\v1.0\powershell.exe</_PS>
    <_VsixNamespace>&lt;Namespace Prefix='vsix' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011'/&gt;</_VsixNamespace>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <Vsix>
      <Deployed>false</Deployed>
      <Updated>false</Updated>
      <AllUsers>false</AllUsers>
    </Vsix>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <InstallVsixDependsOn>
      _PrepareVsix;
      _AugmentVsix;
      _UninstallOudatedVsix;
      _DeployVsix;
      _EnableVsix;
      _DevEnvUpdate
    </InstallVsixDependsOn>
  </PropertyGroup>
  
  <!-- Installs the @(Vsix) item(s) that have been declared if needed -->
  <Target Name="InstallVsix" 
          DependsOnTargets="$(InstallVsixDependsOn)"
          BeforeTargets="DeployVsixExtensionFiles" 
          Condition="'$(DeployExtension)' == 'true'" />

  <Target Name="_PrepareVsix">

    <GetExtensionsPath RootSuffix="$(VSSDKTargetPlatformRegRootSuffix)" Condition="'$(ExtensionsPath)' == '' and '$(VsSDKVersion)' &gt;= '15.0'">
      <Output TaskParameter="LocalExtensionsPath" PropertyName="ExtensionsPath"/>
    </GetExtensionsPath>

    <GetExtensionsPath SubPath="$(ExtensionsDeploymentSubPath)" Condition="'$(ExtensionsPath)' == '' and '$(VsSDKVersion)' &lt;= '14.0'">
      <Output TaskParameter="LocalExtensionsPath" PropertyName="ExtensionsPath"/>
    </GetExtensionsPath>

    <PropertyGroup>
      <ExtensionsPath>$([MSBuild]::EnsureTrailingSlash($(ExtensionsPath)))</ExtensionsPath>
    </PropertyGroup>

    <EnableLoadingAllExtensions RootSuffix="$(VSSDKTargetPlatformRegRootSuffix)" />

  </Target>

  <Target Name="_AugmentVsix" Inputs="@(Vsix)" Outputs="%(Vsix.Identity)-BATCH" Returns="@(Vsix)">

    <ReadManifest Vsix="@(Vsix)">
      <Output TaskParameter="Manifest" PropertyName="_VsixManifest" />
    </ReadManifest>

    <XmlPeek Namespaces="$(_VsixNamespace)"
             XmlContent="$(_VsixManifest)"
             Query="/vsix:PackageManifest/vsix:Metadata/vsix:Identity/@Publisher">
      <Output PropertyName="_VsixPublisher" TaskParameter="Result" />
    </XmlPeek>

    <XmlPeek Namespaces="$(_VsixNamespace)"
             XmlContent="$(_VsixManifest)"
             Query="/vsix:PackageManifest/vsix:Metadata/vsix:Identity/@Id">
      <Output PropertyName="_VsixID" TaskParameter="Result" />
    </XmlPeek>

    <XmlPeek Namespaces="$(_VsixNamespace)"
             XmlContent="$(_VsixManifest)"
             Query="/vsix:PackageManifest/vsix:Metadata/vsix:Identity/@Version">
      <Output PropertyName="_VsixDependencyVersion" TaskParameter="Result" />
    </XmlPeek>

    <FindInstalledExtension VsixIdentifier="$(_VsixID)"
                            InstallableExtensionVersion="42.42.42"
                            RootSuffix="$(VSSDKTargetPlatformRegRootSuffix)"
                            FailIfNotInstalled="false">
      <Output TaskParameter="DeploymentPath" PropertyName="_VsixExistingDeploymentPath" />
      <Output TaskParameter="AllUsers" PropertyName="_VsixAllUsers" />
    </FindInstalledExtension>

    <ItemGroup>
      <Vsix>
        <Publisher>$(_VsixPublisher)</Publisher>
        <Identifier>$(_VsixID)</Identifier>
        <Version>$(_VsixDependencyVersion)</Version>
        <DeploymentPath>$(ExtensionsPath)$(_VsixPublisher)\$(_VsixID)\$(_VsixDependencyVersion)</DeploymentPath>
        <ExistingDeploymentPath>$(_VsixExistingDeploymentPath.TrimEnd('\').TrimEnd('/'))</ExistingDeploymentPath>
        <AllUsers>$(_VsixAllUsers)</AllUsers>
      </Vsix>
      <Vsix>
        <Inputs>%(FullPath)</Inputs>
        <Outputs>%(DeploymentPath)\extension.vsixmanifest</Outputs>
      </Vsix>
    </ItemGroup>

  </Target>

  <Target Name="_UninstallOudatedVsix" Inputs="@(Vsix)" Outputs="%(Vsix.Identity)-BATCH">

    <PropertyGroup>
      <_ShouldUninstallVsix Condition="'%(Vsix.AllUsers)' != 'true' and '%(Vsix.ExistingDeploymentPath)' != '' and $([MSBuild]::ValueOrDefault('%(Vsix.ExistingDeploymentPath)', '').Equals('%(Vsix.DeploymentPath)', StringComparison.OrdinalIgnoreCase)) == 'false'">true</_ShouldUninstallVsix>
    </PropertyGroup>

    <UninstallExtension VsixIdentifier="%(Vsix.Identifier)"
                        RootSuffix="$(VSSDKTargetPlatformRegRootSuffix)"
                        FailIfNotInstalled="false"
                        Condition="'$(_ShouldUninstallVsix)' == 'true'"/>

    <!-- This case means that for whatever reason, the output manifest exists, but the VSIX isn't installed, meaning 
          we need to re-deploy. This can happen if you uninstall from the EM, but don't start VS afterwards. The extension 
          will just be marked for deletion, but the file would still exist on disk. -->
    <Exec Command='rd /s /q "%(Vsix.DeploymentPath)"'
          Condition="'%(Vsix.ExistingDeploymentPath)' == '' and Exists('%(Vsix.Outputs)')" />

    <ItemGroup Condition="'$(_ShouldUninstallVsix)' == 'true'">
      <Vsix>
        <Updated>true</Updated>
      </Vsix>
    </ItemGroup>

    <PropertyGroup Condition="'$(_ShouldUninstallVsix)' == 'true'">
      <_UpdatedVsix>true</_UpdatedVsix>
    </PropertyGroup>
    
  </Target>

  <Target Name="_DeployVsix" Inputs="%(Vsix.Inputs)" Outputs="%(Vsix.Outputs)" Returns="@(Vsix)">

    <Exec Command="&quot;$(_PS)&quot; -NoProfile -Command &quot;&amp; { Add-Type -assembly 'System.IO.Compression.FileSystem'; [System.IO.Compression.ZipFile]::ExtractToDirectory('%(Vsix.FullPath)', '%(Vsix.DeploymentPath)') }&quot;"
			  StandardOutputImportance="high"
			  EchoOff="false">
      <!-- We can't declare a PropertyGroup because that gets evaluated even if the entire targets is skipped in an incremental build -->
      <Output TaskParameter="ExitCode" PropertyName="_DeployedVsix" />
    </Exec>

    <ItemGroup>
      <Vsix>
        <Deployed Condition="'$(_DeployedVsix)' != ''">true</Deployed>
      </Vsix>
    </ItemGroup>

    <TransformTask Source="%(Vsix.Outputs)"
                   Destination="%(Vsix.Outputs)"
                   Transform="$(MSBuildThisFileDirectory)extension.vsixmanifest.xdt" />

    <!-- Just in case no replacements were performed (i.e. it was already SystemComponent=false and Experimental=true) -->
    <Touch Files="%(Vsix.Outputs)" ForceTouch="true" />

  </Target>

  <Target Name="_EnableVsix" Condition="'$(_DeployedVsix)' != '' or '$(_UpdatedVsix)' != ''">

    <!--Enable this extension via Extension Manager in Dev14 -->
    <EnableExtension
        Condition="'$(VsSDKVersion)' &lt; '15.0' and ('%(Vsix.Updated)' == 'true' or '%(Vsix.Deployed)' == 'true')"
        VsixIdentifier="%(Vsix.Identifier)"
        RootSuffix="$(VSSDKTargetPlatformRegRootSuffix)"
        FailIfNotInstalled="true" />

    <!--Enable this extension via Extension Manager in Dev15+ -->
    <EnableExtension
        Condition="'$(VsSDKVersion)' &gt;= '15.0' and ('%(Vsix.Updated)' == 'true' or '%(Vsix.Deployed)' == 'true')"
        VsixIdentifier="%(Vsix.Identifier)"
        VsixVersion="%(Vsix.Version)"
        RootSuffix="$(VSSDKTargetPlatformRegRootSuffix)"
        FailIfNotInstalled="true" />

  </Target>

  <Target Name="_DevEnvUpdate" Condition="'$(_DeployedVsix)' != '' or '$(_UpdatedVsix)' != ''">

    <PropertyGroup>
      <_VsRootDir Condition="'$(VsSDKVersion)' &gt;= '15.0'">$(VsInstallRoot)</_VsRootDir>
      <_VsRootDir Condition="'$(VsSDKVersion)' &lt;= '14.0'">$([MSBuild]::GetRegistryValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\SxS\VS7', '$(VsSDKVersion)'))</_VsRootDir>
    </PropertyGroup>

    <Error Text="Failed to determine the Visual Studio install location for version $(VsSDKVersion)."
           Condition="'$(_VsRootDir)' == ''" />

    <PropertyGroup>
      <_VsRootDir>$([MSBuild]::EnsureTrailingSlash($(_VsRootDir)))</_VsRootDir>
    </PropertyGroup>

    <Exec Command='"$(_VsRootDir)Common7\IDE\devenv.exe" /updateConfiguration /rootSuffix $(VSSDKTargetPlatformRegRootSuffix)' />

  </Target>

  <UsingTask TaskName="ReadManifest" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Vsix ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <Manifest Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="WindowsBase" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Packaging" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var partUrl = "/extension.vsixmanifest";
            try
            {
              using (ZipPackage container = ZipPackage.Open(Vsix.GetMetadata("FullPath")) as ZipPackage)
              {
                  var manifestPart = container.GetPart(new Uri(partUrl, UriKind.Relative)) as ZipPackagePart;
                  using (var source = manifestPart.GetStream())
                  using (var reader = new StreamReader(source))
                  {
                    Manifest = reader.ReadToEnd();
                  }
              }
            }
            catch 
            {
              Log.LogError("Failed to read {0} from {1}.", partUrl, Vsix.GetMetadata("FullPath"));
              throw;
            }
          ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>